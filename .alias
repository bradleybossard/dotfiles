alias ll='ls -l'
alias mkdir='mkdir -vp'
alias cp='cp -v'
alias vi='vim'

# Android compilation commands
alias andrun='./gradlew android:installDebug android:run'

alias hisgrep='history | grep $0'
alias psgrep='ps aux | head -1; ps aux | grep $0'
alias rm='rm -rf'
alias pppath="tr ':\' '\n' <<< '$PATH'"  # pretty print path

alias initreadme='echo "# $(basename $PWD)" > README.md'

alias replacespaaces='for file in *; do mv -n "$file" `echo $file | tr " " "-"` ; done'

alias brave-personal-1='brave-browser --user-data-dir=$HOME/.config/brave-personal-1 &'
alias brave-work-1='brave-browser --user-data-dir=$HOME/.config/brave-work-1 &'

alias google-chrome-1='google-chrome --user-data-dir=$HOME/.config/google-chrome-1 &'
alias google-chrome-2='google-chrome --user-data-dir=$HOME/.config/google-chrome-2 &'
alias google-chrome-3='google-chrome --user-data-dir=$HOME/.config/google-chrome-3 &'


if [[ $OSTYPE == *"linux"* ]]; then
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi

# Show active ports
if [[ $OSTYPE == *"linux"* ]]; then
  alias ports='netstat -tulanp'
elif [[ $OSTYPE == *"darwin"* ]]; then
  alias ports='lsof -i'
fi

if [[ $(which ag | wc -c) -ne 0 ]]; then
  export TAG_SEARCH_PROG=rg  # replace with rg for ripgrep
  tag() {
    command tag "$@";
    source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null
  }
  alias rg='tag'  # replace with rg for ripgrep
fi

function killport {
  PORT_NUMBER=$1;
  lsof -i tcp:${PORT_NUMBER} | awk 'NR!=1 {print $2}' | xargs kill;
}

# Opens the github page for the current git repo/branch in your browser
function ghpage() {
  giturl=$(git config --get remote.origin.url)
  if [ "$giturl" == "" ]
    then
     echo "Not a git repository or no remote.origin.url set"
     exit 1;
  fi

  giturl=${giturl/git\@github\.com\:/https://github.com/}
  giturl=${giturl/\.git/\/tree/}
  branch="$(git symbolic-ref HEAD 2>/dev/null)" ||
  branch="(unnamed branch)"     # detached HEAD
  branch=${branch##refs/heads/}
  giturl=$giturl$branch
  open $giturl
}

function gurl {
  git_url=`git config --get remote.origin.url`
  git_service=`echo $git_url | sed 's/.*\/\/\(git.*\)\.com.*/\1/'`
  git_username=`echo $git_url | sed 's/.*\.com\/\(.*\)\/.*/\1/'`
  git_reponame=`basename $git_url .git`
  printf '\nhttp://%s.%s.io/%s\n\n' $git_username $git_service $git_reponame
}

# tmux aliases
alias tls='tmux list-session'
alias tsw='tmux switch -t '
alias tlc='tmux list-command'
alias tks='tmux kill-session -t'
alias tkall='for session in $(tmux ls | grep : | cut -d. -f1); do tmux kill-session -t $session; done'
alias tgrep='tmux list-session | grep $0'
alias tnew='tmux -2 new-session -d -s ${PWD##*/}; tmux attach -dt ${PWD##*/}'
alias tat='tmux attach -d -t'
alias tcolours='for i in {1..255}; do printf "\x1b[38;5;${i}mcolour%-5i\x1b[0m" $i ; if ! (( ($i + 1 ) % 8 )); then echo ; fi ; done'

# Show failed login attempts
alias sshfailedlogins='grep sshd.\*Failed /var/log/auth.log | less'
# Show failed connect attempts (like a port scanner, for instance)
alias sshfailedconnects='grep sshd.\*Did /var/log/auth.log | less'

alias condapwd='conda activate $(basename $PWD)'

# Python simple HTTP server
alias pyhttp='python -m SimpleHTTPServer'

alias dc='docker-compose'
# TIP: To have a ' inside alias, replace it with '"'"'
# Stop and remove all running containers
alias dockerremovecontainers='docker stop $(docker ps -a -q); docker rm $(docker ps -a -q)'
# Short ps listing without container IDS, etc
alias dockerpsshort='docker ps --format "table {{.Names}}:\t{{.Image}}\t{{.Ports}}"'
# Like top for containers
alias ctop='docker run -ti -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest'

alias dockersecurity='docker run -it --net host --pid host --cap-add audit_control \
    -v /var/lib:/var/lib \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /usr/lib/systemd:/usr/lib/systemd \
    -v /etc:/etc --label docker_bench_security \
    docker/docker-bench-security'

# This alias can be used inside a container to get it's name
alias dockername='cat /proc/self/cgroup | grep "docker" | sed "s/^.*\///" | tail -n1'

# django aliases
alias djrs='python manage.py runserver 0.0.0.0:8000'
alias djs='python manage.py shell'
alias djt='python manage.py test'
alias djl='python manage.py loaddata'
alias djsu='python manage.py createsuperuser'
alias djmm='python manage.py makemigrations'
alias djm='python manage.py migrate'
alias djme='python manage.py makemigrations --empty'

## nginx shortcuts
alias ngrestart='sudo service nginx restart'

# Replace the placeholder with route to current directory
function ngroute {
  dirname=${PWD##*/}
  file='/etc/nginx/sites-available/default'
  route="  location /$dirname {\n    alias ${PWD};\n    autoindex on;\n  }\n\n"
  if grep -q location\ /$dirname $file
  then
    echo "Route already exists, exiting"
    return
  fi
  comment='### INSERT NEW ROUTE HERE'  # Placeholder in nginx config
  sudo bash -c "sed -i 's|$comment|$route$comment|' $file"
  ngrestart
  ngurl
}

function ngproxy {
	if [ $# -lt 1 ]
		then
			echo "Usage: $FUNCNAME <port-to-be-forwarded>"
			echo "  ex. $FUNCNAME 4201"
		  return
	fi

  dirname=${PWD##*/}
  port=$1
  available="/etc/nginx/sites-available/$dirname"
  enabled="/etc/nginx/sites-enabled/$dirname"

  sudo bash -c "cat >$available <<EOF
server {
  listen 80;
  server_name $dirname.bradleybossard.com;
  location / {
    proxy_pass http://127.0.0.1:$port;
  }
}
EOF
"

  sudo ln -fs $available $enabled
}

#TODO: Fix this to use FQDN
function ngurl {
  dirname=$(basename `pwd`)
  printf "\nhttp://bradleybossard.com/%s\n\n" $dirname
}

function slackemoji {
  # Fetch
  wget $1
  filename=`basename $1`
  ext="${filename##*.}"
  filename_noext="${filename%.*}"
  resized_name=$filename_noext-resized.${ext}
  width=`identify -format %[fx:w] $filename`
  height=`identify -format %[fx:h] $filename`
  max=$(( $width > $height ? $width : $height ))
  convert $filename -gravity center -extent ${max}x${max} -resize 120x120 $resized_name
  rm $filename
}

# Removes local branches corresponding to deleted remote branches
gitprunelocal() {
  REMOTES="$@";
  if [ -z "$REMOTES" ]; then
    REMOTES=$(git remote);
  fi
  REMOTES=$(echo "$REMOTES" | xargs -n1 echo)
  RBRANCHES=()
  while read REMOTE; do
    CURRBRANCHES=($(git ls-remote $REMOTE | awk '{print $2}' | grep 'refs/heads/' | sed 's:refs/heads/::'))
    RBRANCHES=("${CURRBRANCHES[@]}" "${RBRANCHES[@]}")
  done < <(echo "$REMOTES" )
  [[ $RBRANCHES ]] || exit
  LBRANCHES=($(git branch | sed 's:\*::' | awk '{print $1}'))
  for i in "${LBRANCHES[@]}"; do
    skip=
    for j in "${RBRANCHES[@]}"; do
      [[ $i == $j ]] && { skip=1; echo -e "\033[32m Keeping $i \033[0m"; break; }
    done
    [[ -n $skip ]] || { echo -e "\033[31m $(git branch -D $i) \033[0m"; }
  done
}

if [[ $OSTYPE == *"darwin"* ]]; then
  # The closest substitute for lsusb on OSX
  alias lsusb='ioreg -p IOUSB -l -w 0'
fi

function tmux-resurrect-reset-last() {
  pushd .
  cd ~/.tmux/resurrect && ln -f -s $(/bin/ls -t tmux_resurrect_*.txt | head -n 1) last && /bin/ls -l last
  popd
}
