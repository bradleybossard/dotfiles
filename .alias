alias ll='ls -l'
alias mkdir='mkdir -vp'
alias cp='cp -v'
alias vi='vim'




# Android compilation commands
alias andrun='./gradlew android:installDebug android:run'

alias hisgrep='history | grep $0'
alias psgrep='ps aux | head -1; ps aux | grep $0'
alias rm='rm -rf'
alias pppath="tr ':\' '\n' <<< '$PATH'"  # pretty print path

alias initreadme='echo "# $(basename $PWD)" > README.md'

alias replacespaaces='for file in *; do mv -n "$file" `echo $file | tr " " "-"` ; done'

alias brave-personal-1='brave-browser --user-data-dir=$HOME/.config/brave-personal-1 &'
alias brave-work-1='brave-browser --user-data-dir=$HOME/.config/brave-work-1 &'

alias lg='lazygit'

if [[ $OSTYPE == *"linux"* ]]; then
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi

com () {COM=$(echo -n git commit -m \"\[`git rev-parse --abbrev-ref HEAD | sed -r 's/^.*\/(.*)-([0-9]*)-.*/\1-\2/ '`\]); echo $COM | pbcopy}
comf () {COM=$(echo -n git commit -m \"fixup: ); echo $COM | pbcopy}
combp () {COM=$(echo -n git commit -m \"aside: bump poetry dependencies\" ); echo $COM | pbcopy}
coma () {COM=$(echo -n git commit -m \"aside: ); echo $COM | pbcopy}
jenk () {COM=$(echo -n https://jenkins.internal.cloud.torc.tech/torc-robotics/job/gis/job/`basename $(git rev-parse --show-toplevel)
  `/job/bradley.bossard%2F`git rev-parse --abbrev-ref HEAD   | sed -r 's/^.*\/(.*)/\1/ '`); echo $COM | pbcopy}

# https://jenkins.internal.cloud.torc.tech/torc-robotics/job/gis/job/gis-dashboard/job/bradley.bossard%2FMAP3-445-indexer-for-rrs-tilesets/

alias yt-list='yt-dlp --write-auto-subs --write-subs --embed-subs --playlist-reverse --download-archive ./downloaded.txt -i -o "%(uploader)s/%(playlist)s/%(playlist)s - S01E%(playlist_index)s - %(title)s [%(id)s].%(ext)s" --merge-output-format mp4 --add-metadata --write-description --write-info-json --write-thumbnail --batch-file=./list.txt'


# Show active ports
if [[ $OSTYPE == *"linux"* ]]; then
  alias ports='netstat -tulanp'
elif [[ $OSTYPE == *"darwin"* ]]; then
  alias ports='lsof -i'
fi

if [[ $(which ag | wc -c) -ne 0 ]]; then
  export TAG_SEARCH_PROG=rg  # replace with rg for ripgrep
  tag() {
    command tag "$@";
    source ${TAG_ALIAS_FILE:-/tmp/tag_aliases} 2>/dev/null
  }
#  alias rg='tag'  # replace with rg for ripgrep
fi

function killport {
  PORT_NUMBER=$1;
  lsof -i tcp:${PORT_NUMBER} | awk 'NR!=1 {print $2}' | xargs kill;
}

function simplify_pdf {
gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile=${1}-compressed.pdf ${1}.pdf
}

# tmux aliases
alias tls='tmux list-session'
alias tsw='tmux switch -t '
alias tlc='tmux list-command'
alias tks='tmux kill-session -t'
alias tkall='for session in $(tmux ls | grep : | cut -d. -f1); do tmux kill-session -t $session; done'
alias tgrep='tmux list-session | grep $0'
alias tnew='tmux -2 new-session -d -s ${PWD##*/}; tmux attach -dt ${PWD##*/}'
alias tat='tmux attach -d -t'
alias tcolours='for i in {1..255}; do printf "\x1b[38;5;${i}mcolour%-5i\x1b[0m" $i ; if ! (( ($i + 1 ) % 8 )); then echo ; fi ; done'

# Show failed login attempts
alias sshfailedlogins='grep sshd.\*Failed /var/log/auth.log | less'
# Show failed connect attempts (like a port scanner, for instance)
alias sshfailedconnects='grep sshd.\*Did /var/log/auth.log | less'

alias condapwd='conda activate $(basename $PWD)'

# Python simple HTTP server
alias pyhttp='python -m SimpleHTTPServer'

alias dc='docker-compose'
# TIP: To have a ' inside alias, replace it with '"'"'
# Stop and remove all running containers
alias dockerremovecontainers='docker stop $(docker ps -a -q); docker rm $(docker ps -a -q)'
# Short ps listing without container IDS, etc
alias dockerpsshort='docker ps --format "table {{.Names}}:\t{{.Image}}\t{{.Ports}}"'
# Like top for containers
alias ctop='docker run -ti -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest'

alias dockersecurity='docker run -it --net host --pid host --cap-add audit_control \
    -v /var/lib:/var/lib \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /usr/lib/systemd:/usr/lib/systemd \
    -v /etc:/etc --label docker_bench_security \
    docker/docker-bench-security'

# This alias can be used inside a container to get it's name
alias dockername='cat /proc/self/cgroup | grep "docker" | sed "s/^.*\///" | tail -n1'

# Removes local branches corresponding to deleted remote branches
gitprunelocal() {
  REMOTES="$@";
  if [ -z "$REMOTES" ]; then
    REMOTES=$(git remote);
  fi
  REMOTES=$(echo "$REMOTES" | xargs -n1 echo)
  RBRANCHES=()
  while read REMOTE; do
    CURRBRANCHES=($(git ls-remote $REMOTE | awk '{print $2}' | grep 'refs/heads/' | sed 's:refs/heads/::'))
    RBRANCHES=("${CURRBRANCHES[@]}" "${RBRANCHES[@]}")
  done < <(echo "$REMOTES" )
  [[ $RBRANCHES ]] || exit
  LBRANCHES=($(git branch | sed 's:\*::' | awk '{print $1}'))
  for i in "${LBRANCHES[@]}"; do
    skip=
    for j in "${RBRANCHES[@]}"; do
      [[ $i == $j ]] && { skip=1; echo -e "\033[32m Keeping $i \033[0m"; break; }
    done
    [[ -n $skip ]] || { echo -e "\033[31m $(git branch -D $i) \033[0m"; }
  done
}

if [[ $OSTYPE == *"darwin"* ]]; then
  # The closest substitute for lsusb on OSX
  alias lsusb='ioreg -p IOUSB -l -w 0'
fi

function tmux-resurrect-reset-last() {
  pushd .
  cd ~/.tmux/resurrect && ln -f -s $(/bin/ls -t tmux_resurrect_*.txt | head -n 1) last && /bin/ls -l last
  popd
}


function reset_urb() {
	for i in /sys/bus/pci/drivers/[uoex]hci_hcd/*:*; do
		[ -e "$i" ] || continue
		echo "${i##*/}" > "${i%/*}/unbind"
		echo "${i##*/}" > "${i%/*}/bind"
	done
}

alias activate_ros2='source /opt/ros/humble/setup.zsh  &&  export ROS_DOMAIN_ID=25'

alias dive="docker run -ti --rm  -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive"

alias dbx="distrobox"
alias dbx-stop="distrobox stop --yes $(distrobox ls | grep Up | cut -d\| -f2)"

function dbx-clone {
  APP_NAME=$1;
  dbx create --clone ubuntu-base --name $APP_NAME
  dbx enter ${APP_NAME} -- distrobox-export --app brave-browser --export-label brave-$APP_NAME
}

