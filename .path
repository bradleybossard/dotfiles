set -o vi

export SVN_EDITOR=vim

if [[ $OSTYPE == *"linux"* ]]; then
# added by Anaconda3 5.3.1 installer
# >>> conda init >>>
# !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$(CONDA_REPORT_ERRORS=false '/home/bradleybossard/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
  if [ $? -eq 0 ]; then
      \eval "$__conda_setup"
  else
      if [ -f "/home/bradleybossard/anaconda3/etc/profile.d/conda.sh" ]; then
          . "/home/bradleybossard/anaconda3/etc/profile.d/conda.sh"
          CONDA_CHANGEPS1=false conda activate base
      else
          \export PATH="/home/bradleybossard/anaconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
# <<< conda init <<<
fi

# android
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools

# brew
if [[ $OSTYPE == *"darwin"* ]]; then
  homebrew=/usr/local/bin:/usr/local/sbin
  export PATH=$homebrew:$PATH
fi

# anaconda
## NOTE: Path needs to be added after brew to use conda python
if [[ $OSTYPE == *"darwin"* ]]; then
  export PATH="/usr/local/anaconda3/bin:$PATH"
fi

# fastlane
#if [[ $OSTYPE == *"darwin"* ]]; then
#  export PATH="$HOME/.fastlane/bin:$PATH"
#fi

# flutter
export PATH=$PATH:$HOME/flutter/bin

# go
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN
if [[ $OSTYPE == "linux-gnueabihf" ]]; then
  export PATH=/usr/local/go/bin:$PATH
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# node/npm - for globally installed npm packages with needing sudo
NPM_PACKAGES="${HOME}/.npm-packages"
export PATH="$PATH:$NPM_PACKAGES/bin"
export MANPATH="${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man"

# OPS config
if [[ $OSTYPE == *"linux"* ]]; then
  export OPS_DIR="$HOME/.ops"
  export PATH="$HOME/.ops/bin:$PATH"
fi

# pip3, notably aws-cli
#if [[ $OSTYPE == *"darwin"* ]]; then
#  pip3_installs=~/Library/Python/3.6/bin
#elif [[ $OSTYPE == *"linux"* ]]; then
#  pip3_installs=~/.local/bin
#fi
#export PATH=$pip3_installs:$PATH

# pyenv
if command -v pyenv &> /dev/null; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  export PYENV_VIRTUALENV_DISABLE_PROMPT=1
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

# psql
if [[ $OSTYPE == *"darwin"* ]]; then
  # Fixes bug where query was not executed when
  # exiting vim.  Need to test if it's needed for linux
  export PSQL_EDITOR="vim -u NONE"
  export FCEDIT='vim'
fi

# renderman
if [[ $OSTYPE == *"darwin"* ]]; then
  export RMANTREE='/Applications/Pixar/RenderManProServer-21.3'
  export PATH=$RMANTREE/bin:$PATH
fi

# ruby
if [[ $OSTYPE == *"darwin"* ]]; then
  # Check if ruby was installed via homebrew
  RUBY_PATH='/usr/local/opt/ruby/bin'
  GEM_PATH='/usr/local/lib/ruby/gems/2.6.0/bin'
  if [ -x $RUBY_PATH ]; then
    PATH=$RUBY_PATH:$GEM_PATH:$PATH
  fi
fi
#if [ -x "$HOME/.gem" ]; then
#  export GEM_HOME="$HOME/.gem"
  # export GEM_HOME=~/.gems
# export PATH="$GEM_HOME:$PATH"
#fi

# rust
if [ -x "$HOME/.cargo" ]; then
  export PATH="$HOME/.cargo/bin:$PATH"
fi

# snap install binary directory
if [[ $OSTYPE == *"linux"* ]]; then
  export PATH=/snap/bin:$PATH
fi

# swift
if [[ $OSTYPE == *"linux"* ]]; then
  export PATH=/opt/swift/swift-3.0/usr/bin:$PATH
fi

# user binaries
if [ -x "$HOME/bin" ]; then
  export PATH=$HOME/bin:$PATH
fi

if [[ $OSTYPE == *"darwin"* ]]; then
  export ZPLUG_HOME=/usr/local/opt/zplug
  source $ZPLUG_HOME/init.zsh
fi
